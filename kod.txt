Aşağıda Jupyter Notebook uyumlu olacak şekilde, **kişileri benzersiz şekilde sayan**, **anlık kişi sayımını yapan** ve **kalabalık yoğunluğunu hesaplayan** bir kod yapısını adım adım sana veriyorum. Bu yapı senin önceki kodunun üzerine kuruldu, ve `ByteTrack` kullanıyor.

---

### 📦 1. Gerekli Kurulumlar

```python
!pip install ultralytics supervision bytetrack opencv-python
```

---

### 📁 2. Gerekli Kütüphaneler

```python
import cv2
import os
from ultralytics import YOLO
from supervision import Detections, BoxAnnotator, LabelAnnotator, Color
from supervision.tools.detections import Box
from supervision.tracking.byte_tracker import BYTETracker
```

---

### 📦 3. Model ve Tracker Başlat

```python
model = YOLO("yolov8n.pt")  # YOLO modeli
tracker = BYTETracker()     # ByteTrack nesne izleyici
```

---

### 📹 4. Video ve Yazıcı Ayarları

```python
video_path = "street.mp4"
output_video_path = "output/street_detection.mp4"
cap = cv2.VideoCapture(video_path)

width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps    = cap.get(cv2.CAP_PROP_FPS)

os.makedirs("output", exist_ok=True)

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))
```

---

### 🧠 5. Annotator ve Sayaçlar

```python
box_annotator = BoxAnnotator(thickness=2, color=Color(255, 0, 0))
label_annotator = LabelAnnotator(text_thickness=2, text_scale=1, text_color=Color(255, 255, 255), color=Color(0, 0, 0))

unique_ids = set()         # Her benzersiz kişi için ID tutar
frame_idx = 0              # Kare sayacı
```

---

### 🧮 6. Kare İşleme ve Takip

```python
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame, classes=0, conf=0.25)[0]
    detections = Detections.from_ultralytics(results)

    # Takip yap
    detections = tracker.update_with_detections(detections)

    # Kişi sayımı için ID'leri topla
    for track_id in detections.tracker_id:
        if track_id not in unique_ids:
            unique_ids.add(track_id)

    current_count = len(detections.tracker_id)      # O anki karedeki kişi sayısı
    total_count = len(unique_ids)                   # Videoda tespit edilen toplam kişi sayısı

    # Kalabalık yoğunluğu: kişi sayısı / toplam alan (piksel cinsinden)
    area = width * height
    density = current_count / area * 1e6  # Normalleştirme için 1M ile çarpıldı

    # Etiketler
    labels = [f"ID: {track_id}" for track_id in detections.tracker_id]
    frame = box_annotator.annotate(frame, detections)
    frame = label_annotator.annotate(frame, detections, labels)

    # Sayaçları ekrana yaz
    cv2.putText(frame, f"Current Count: {current_count}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2)
    cv2.putText(frame, f"Total Count: {total_count}", (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2)
    cv2.putText(frame, f"Density: {density:.4f}", (20, 120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)

    out.write(frame)
    frame_idx += 1
```

---

### 🛑 7. Temizlik

```python
cap.release()
out.release()
cv2.destroyAllWindows()

print(f"Toplam kişi sayısı: {total_count}")
```

---

### ✅ Bu Kod Ne Yapar?

| Özellik                   | Açıklama                                                 |
| ------------------------- | -------------------------------------------------------- |
| **Benzersiz kişi takibi** | `ByteTrack` ile ID atayıp aynı kişiyi tekrar saymaz.     |
| **Anlık kişi sayımı**     | Her karedeki mevcut kişi sayısını gösterir.              |
| **Toplam kişi sayımı**    | Videoda toplam kaç farklı kişi göründüğünü sayar.        |
| **Kalabalık yoğunluğu**   | Alan başına kişi yoğunluğunu hesaplar (M piksel başına). |

---

İstersen belirli bölgelere göre yoğunluk ölçümü (örneğin: frame'in ortası, sol taraf gibi) de ekleyebilirim.

Devam edelim mi?
